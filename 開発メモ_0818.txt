node.js
  development と production がある。
  production が本番で、https が使えるようにしないと動かない
  
node.js をインストールした後、npm -i で npm が管理する library をインストールする

map_infecctions/ で、
  copy .env.development .env.development.local をして
  .env.development.local に mapbox の token を書く
  
Redis をインストール
  mapbox のアクセス管理に使っているらしい
  

拡張子.mjs
  ES6 の java script の拡張子
  ES(2016)



■■ server 起動 ...... １つのコマンドプロンプトで行う
node src/server/server.mjs

■■ プロジェクトの起動 ..... 別のコマンドプロンプトで行う
npm run start .... ブラウザが起動されて、表示される
　　package.json の　scripts.start に指定されている内容を実行する



■■ データベースを作る.......ブラウザで行う
サーバーを起動した後
http://localhost:3001/covid19map/api/1.0/make_data


長野県 HTMLスクレイピング
三重県 CSV
山梨県 エクセルシート



■■■デバッグ方法
デバッグコンソールの起動
　ブラウザのCTRL+SHIFT+iでデバッグコンソールが起動する

react のデバッグ
　reactをデバッグするときはchromeで、facebookが出してるadd-onが必要です
　React Developer Toolsというのです
　

秀和のならだいたい間違いないと思うんですが・・・
素のJSはごくシンプルなCライクの言語なんですが、近年激しく機能追加されていて、すごい高級言語になってるのです。
勘所は、ラムダ式やスプレッド構文、あとfor( ... in )やForeach, map, reduceといった制御構造と、
https://qiita.com/soarflat/items/b251caf9cb59b72beb9b
あとPromiseとasync/awaitの非同期処理、それとObject, Array, String, Map, Setのビルトインクラスの使い方だと思います。

リファレンスはMDN(mozilla)のサイト
https://developer.mozilla.org/ja/docs/Web/JavaScript
が便利です。しかしここのチュートリアルは冗長なうえ和文がないのでいまいちです。


Node.jsのデバッグは、自分はIDEにWebStromを使ってますが、たぶんVisual Studio Codeでもデバッグは可能です。
https://nodejs.org/ja/docs/guides/debugging-getting-started/
reactのデバッグはできませんが、そっちはクライアントなので影響ないと思います

mapbox のライブラリ deck.gl


■■■ JavaScript 勉強サイト
https://www.javadrive.jp/javascript/
アロー関数　https://qiita.com/may88seiji/items/4a49c7c78b55d75d693b
  (arguments) => { function }
  1 行の場合は { } を省略できる。1行の場合は、return も省略できる。
  
  let getTriangle = (base, height) => {
    return base * height / 2;
  };
  
  let getTriangle = (base, height) => base * height / 2;
  
  
　function [fName](arguments) { function body }
  　fName は省略可能、省略した時は無名関数
　　function sum(a,b){ return a+b; }
　　var sum = function(a,b){ return a+b; }
　　var sum = (function(a,b){ return a+b+ })(1,2);  こんなことをする意味はあるか？



setTimeout() を使った非同期関数　https://qiita.com/matsuby/items/3dd9cfca8c7b0685e474
コールバック関数　https://qiita.com/matsuby/items/3f635943f25e520b7c20
　fs.readFile('/etc/passwd', function(err, data) {
　  if (err) throw err;
  　console.log(data);
　});
　の気持ち悪さのことも書いてある。
Promise　https://azu.github.io/promises-book/#introduction


関連技術　http://www.tohoho-web.com/ex/jstech.html

■■■ node.js 
node.js 入門　http://www.tohoho-web.com/ex/nodejs.html

Express の説明　https://expressjs.com/ja/guide/writing-middleware.html
                https://gist.github.com/mitsuruog/fc48397a8e80f051a145


  app.use(express.static('public'));
    http://localhost:3000/images/kitten.jpg
    http://localhost:3000/css/style.css

  app.use('/static', express.static('public'));
    http://localhost:3000/static/images/kitten.jpg
    http://localhost:3000/static/css/style.css






■■■ 改めて react のプロジェクトの作り方、React Developer Tools(on Firefox) の使い方等
npm init react-app react_app





React Developer Tools
  ctl-shift-i
  デバッガータグを選ぶ
  ソースファイル の c://Users/uma3san/..../src の App.js が React のエントリー
  
  

Visual Studio Code
　コマンドパレットの使い方 ctl-shift-p


node.js のデバッグ.
コンソールから、
C:\Users\uma3san\Documents\__Projects\map_infections>node --inspect-brk src/server/server.mjs

　Debugger listening on ws://127.0.0.1:9229/96c53520-967d-451b-83f5-86a2a6f394f7
　For help, see: https://nodejs.org/en/docs/inspector
　Debugger attached.
　
chrome のアドレスバーに、chrome://inspect とアクセスする


　Remote Target　#LOCALHOST
　Target (v14.7.0)　trace
　src/server/server.mjs　file:///C:/_Users_uma3san_Documents___Projects_map_infections_src_server_server.mjs
　
　inspect  <-- これをクリックする
　open dedicated DevTools for Node <-- こっちをクリック？
　